{"ast":null,"code":"// import {ChangeEvent, ChangeEventHandler, useCallback, useEffect, useMemo, useState} from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { setTodoList, addTodo, updateTodo, removeTodo, filterCompletedTodo, State } from '../features/todoList/TodoSlice';\n// import './styles/TodoList.css';\n// import { clickOptions } from '@testing-library/user-event/dist/click';\n\n// function TodoList() {\n//   const [inputValue, setInputValue] = useState('');\n//   const [priorityCriteria, setPriorityCriteria] = useState(\"High\");\n//   const [filter, setFilter] = useState('All');\n\n//   const dispatch = useDispatch();\n//   const todoList = useSelector((state: State) => state.todoList);\n\n//   useEffect(() => {\n//     document.title = `You have ${todoList.length} todos`;\n// }, [todoList]);\n//   //  console.log(todoList)\n//   const handleAddTodo = useCallback(() => {\n//     dispatch(addTodo({\n//       task: inputValue,\n//       priorityCriteria,\n//       isCompleted: false\n//     }));\n//     setInputValue('');\n//   },[dispatch, inputValue, priorityCriteria])\n\n//   const handleRemoveTodo = useCallback((todoId: string) => {\n//     const todoToRemove = todoList.find(todo => todo.id === todoId);\n//     if (todoToRemove){\n//       dispatch(removeTodo({\n//         id: todoId,\n//       }))\n//     }\n//   }, [dispatch, todoList])\n\n//   const handleInputChange = useCallback((e: ChangeEvent<HTMLInputElement>) =>{\n//     const inputValue = e.target.value\n//     setInputValue(inputValue)\n//   }, []);\n\n//   const handlePriorityCriteria = useCallback((e: ChangeEvent<HTMLSelectElement>) => {\n//     setPriorityCriteria(e.target.value)\n//   },[]);\n\n//   const handleUpdatePriority: ChangeEventHandler<HTMLSelectElement> = useCallback((e) => {\n//     const updatedPriority = e.target.value  \n//     // console.log(updatedPriority)\n//     const id = e.currentTarget.dataset.todoId \n//       if (id) {\n//         dispatch(updateTodo({\n//           id: id,\n//           priorityCriteria: updatedPriority\n//         }))\n//       }\n//   }, [dispatch, todoList])\n//   /*I tried to update the priority \n//   inside the select options box, but I could't find a way, \n//   even though it does change the value as you can see with the console.log*/\n\n//   const handleToggleTodo = useCallback((todoId: string) => {\n//     const todoToToggle = todoList.find(todo => todo.id === todoId);\n//     if (todoToToggle) {\n//       dispatch(updateTodo({\n//         id: todoId,\n//         isCompleted: !todoToToggle.isCompleted\n//        }))\n//     }\n//   },[dispatch, todoList])\n\n//   //Sort\n//   const filteredTodoList = useMemo(() => {\n//     switch(filter) {\n//       case 'Completed':\n//         return todoList.filter(todo => todo.isCompleted);\n//       case 'Pending': \n//         return todoList.filter(todo => !todo.isCompleted);\n//       default:\n//         return todoList;\n//     }\n//   },[todoList, filter])\n\n//   return (\n//     <>\n//     <h1>Raul's Todo List</h1>\n\n//     <div className=\"addTodoContainer\">\n//         <input\n//          className=\"input\"\n//          id=\"todo\"\n//          type=\"text\"\n//          value={inputValue} \n//          placeholder='Add your todo...'\n//          onChange={handleInputChange}\n//          />\n\n//           <select \n//             value={priorityCriteria}\n//             onChange={handlePriorityCriteria}\n//           >\n//             <option value=\"High\">High</option>\n//             <option value=\"Medium\">Medium</option>\n//             <option value=\"Low\">Low</option>\n//           </select>\n\n//          <button \n//          onClick={handleAddTodo}\n//          className=\"addTodoButton\">ADD TODO</button>\n//     </div>\n//       <br />\n//     <div>\n//       <button onClick={() => setFilter('Completed')}>Show Completed</button>\n//       <button onClick={() => setFilter('Pending')}>Show Pending</button>\n//       <button onClick={() => setFilter('All')}>Show All</button>\n//     </div>\n//       {filteredTodoList.map(todo => (\n//         <div className=\"todo\" key={todo.id}>\n//         <p>TASK: {todo.task}</p>\n//         <p>{todo.isCompleted ? 'Completed' : 'Pending'}</p>\n//         <button \n//           onClick={() => handleToggleTodo(todo.id)}\n//         >{todo.isCompleted ? 'Mark Incomplete' : 'Mark Complete'}</button>\n//         <br />\n//         <select \n//             value={todo.id === priorityCriteria ? todo.priorityCriteria : priorityCriteria}\n//             onChange={(e) => handleUpdatePriority(e)}\n//             data-todo-id={todo.id}\n//           >\n//             <option value=\"High\">High</option>\n//             <option value=\"Medium\">Medium</option>\n//             <option value=\"Low\">Low</option>\n//           </select>\n//           <br />\n//         <button\n//          onClick={() => handleRemoveTodo(todo.id)}>Remove</button>\n//         </div>\n\n//       ))}\n//     </>\n//   )\n// }\n\n// export default TodoList;","map":{"version":3,"names":[],"sources":["/Users/raulbarros/Desktop/todo-redux/src/components/TodoList.tsx"],"sourcesContent":["// import {ChangeEvent, ChangeEventHandler, useCallback, useEffect, useMemo, useState} from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { setTodoList, addTodo, updateTodo, removeTodo, filterCompletedTodo, State } from '../features/todoList/TodoSlice';\n// import './styles/TodoList.css';\n// import { clickOptions } from '@testing-library/user-event/dist/click';\n\n// function TodoList() {\n//   const [inputValue, setInputValue] = useState('');\n//   const [priorityCriteria, setPriorityCriteria] = useState(\"High\");\n//   const [filter, setFilter] = useState('All');\n\n//   const dispatch = useDispatch();\n//   const todoList = useSelector((state: State) => state.todoList);\n\n//   useEffect(() => {\n//     document.title = `You have ${todoList.length} todos`;\n// }, [todoList]);\n//   //  console.log(todoList)\n//   const handleAddTodo = useCallback(() => {\n//     dispatch(addTodo({\n//       task: inputValue,\n//       priorityCriteria,\n//       isCompleted: false\n//     }));\n//     setInputValue('');\n//   },[dispatch, inputValue, priorityCriteria])\n  \n//   const handleRemoveTodo = useCallback((todoId: string) => {\n//     const todoToRemove = todoList.find(todo => todo.id === todoId);\n//     if (todoToRemove){\n//       dispatch(removeTodo({\n//         id: todoId,\n//       }))\n//     }\n//   }, [dispatch, todoList])\n\n\n//   const handleInputChange = useCallback((e: ChangeEvent<HTMLInputElement>) =>{\n//     const inputValue = e.target.value\n//     setInputValue(inputValue)\n//   }, []);\n  \n//   const handlePriorityCriteria = useCallback((e: ChangeEvent<HTMLSelectElement>) => {\n//     setPriorityCriteria(e.target.value)\n//   },[]);\n\n//   const handleUpdatePriority: ChangeEventHandler<HTMLSelectElement> = useCallback((e) => {\n//     const updatedPriority = e.target.value  \n//     // console.log(updatedPriority)\n//     const id = e.currentTarget.dataset.todoId \n//       if (id) {\n//         dispatch(updateTodo({\n//           id: id,\n//           priorityCriteria: updatedPriority\n//         }))\n//       }\n//   }, [dispatch, todoList])\n//   /*I tried to update the priority \n//   inside the select options box, but I could't find a way, \n//   even though it does change the value as you can see with the console.log*/\n\n//   const handleToggleTodo = useCallback((todoId: string) => {\n//     const todoToToggle = todoList.find(todo => todo.id === todoId);\n//     if (todoToToggle) {\n//       dispatch(updateTodo({\n//         id: todoId,\n//         isCompleted: !todoToToggle.isCompleted\n//        }))\n//     }\n//   },[dispatch, todoList])\n\n//   //Sort\n//   const filteredTodoList = useMemo(() => {\n//     switch(filter) {\n//       case 'Completed':\n//         return todoList.filter(todo => todo.isCompleted);\n//       case 'Pending': \n//         return todoList.filter(todo => !todo.isCompleted);\n//       default:\n//         return todoList;\n//     }\n//   },[todoList, filter])\n\n//   return (\n//     <>\n//     <h1>Raul's Todo List</h1>\n\n//     <div className=\"addTodoContainer\">\n//         <input\n//          className=\"input\"\n//          id=\"todo\"\n//          type=\"text\"\n//          value={inputValue} \n//          placeholder='Add your todo...'\n//          onChange={handleInputChange}\n//          />\n         \n//           <select \n//             value={priorityCriteria}\n//             onChange={handlePriorityCriteria}\n//           >\n//             <option value=\"High\">High</option>\n//             <option value=\"Medium\">Medium</option>\n//             <option value=\"Low\">Low</option>\n//           </select>\n         \n//          <button \n//          onClick={handleAddTodo}\n//          className=\"addTodoButton\">ADD TODO</button>\n//     </div>\n//       <br />\n//     <div>\n//       <button onClick={() => setFilter('Completed')}>Show Completed</button>\n//       <button onClick={() => setFilter('Pending')}>Show Pending</button>\n//       <button onClick={() => setFilter('All')}>Show All</button>\n//     </div>\n//       {filteredTodoList.map(todo => (\n//         <div className=\"todo\" key={todo.id}>\n//         <p>TASK: {todo.task}</p>\n//         <p>{todo.isCompleted ? 'Completed' : 'Pending'}</p>\n//         <button \n//           onClick={() => handleToggleTodo(todo.id)}\n//         >{todo.isCompleted ? 'Mark Incomplete' : 'Mark Complete'}</button>\n//         <br />\n//         <select \n//             value={todo.id === priorityCriteria ? todo.priorityCriteria : priorityCriteria}\n//             onChange={(e) => handleUpdatePriority(e)}\n//             data-todo-id={todo.id}\n//           >\n//             <option value=\"High\">High</option>\n//             <option value=\"Medium\">Medium</option>\n//             <option value=\"Low\">Low</option>\n//           </select>\n//           <br />\n//         <button\n//          onClick={() => handleRemoveTodo(todo.id)}>Remove</button>\n//         </div>\n       \n//       ))}\n//     </>\n//   )\n// }\n\n// export default TodoList;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}