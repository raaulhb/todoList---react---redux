{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { v4 as uuids4 } from 'uuid';\nconst initialState = [];\nexport const TodoSlice = createSlice({\n  name: 'todoList',\n  initialState,\n  reducers: {\n    setTodoList: (state, action) => {\n      state = action.payload;\n    },\n    addTodo: (state, action) => {\n      const {\n        task,\n        priorityCriteria\n      } = action.payload;\n      state.push({\n        id: uuids4(),\n        task,\n        priorityCriteria,\n        isCompleted: false\n      });\n    },\n    updateTodo: (state, action) => {\n      const {\n        id,\n        isCompleted,\n        priorityCriteria\n      } = action.payload;\n      const todoToUpdate = state.find(todo => todo.id === id);\n      if (todoToUpdate) {\n        todoToUpdate.isCompleted = isCompleted;\n        todoToUpdate.priorityCriteria = priorityCriteria;\n      }\n    }\n  }\n});\n\n// sortTodo: (state, action) => {\n//     state.sortCriteria = action.payload;\n// },\n// updateTodo: (state, action) => {\n//     const { id, task } = action.payload;\n//     const index = state.todoList.findIndex(todo => todo.id === id);\n//     if (index !== -1) {\n//         state.todoList[index] = {\n//         ...state.todoList[index],\n//             task\n//          }\n//     }\n\n//  },\n// toggleTodo: (state, action) => {\n//     const {id, isCompleted} = action.payload;\n//     const index = state.todoList.findIndex(todo => todo.id === id);\n//     if (index !== -1) {\n//         state.todoList[index] = {\n//             ...state.todoList[index],\n//             isCompleted\n//         }\n//     }\n// }\n\nexport const {\n  setTodoList,\n  addTodo,\n  updateTodo\n} = TodoSlice.actions;\nexport default TodoSlice.reducer;","map":{"version":3,"names":["createSlice","v4","uuids4","initialState","TodoSlice","name","reducers","setTodoList","state","action","payload","addTodo","task","priorityCriteria","push","id","isCompleted","updateTodo","todoToUpdate","find","todo","actions","reducer"],"sources":["/Users/raulbarros/Desktop/todo-redux/src/features/todoList/TodoSlice.tsx"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { v4 as uuids4 } from 'uuid';\n\ninterface Todo {\n    id: string;\n    task: string;\n    isCompleted: boolean;\n    priorityCriteria: string;\n}\nexport interface State {\n    todoList: Todo[];\n    sortCriteria: string;\n}\n\nconst initialState: Todo[] = [];\n\nexport const TodoSlice = createSlice({\n    name: 'todoList',\n    initialState,\n    reducers: {\n        setTodoList: (state, action) => {\n            state = action.payload;\n        },\n        addTodo: (state, action) => {\n            const { task, priorityCriteria } = action.payload;\n            state.push({\n              id: uuids4(),\n              task,\n              priorityCriteria,\n              isCompleted: false,\n            });\n        },\n        updateTodo: (state, action) => {\n          const  { id, isCompleted, priorityCriteria } = action.payload;\n          const todoToUpdate = state.find(todo => todo.id === id);\n          if (todoToUpdate) {\n            todoToUpdate.isCompleted = isCompleted;\n            todoToUpdate.priorityCriteria = priorityCriteria;\n          }\n        }\n    },\n})\n\n\n\n\n        // sortTodo: (state, action) => {\n        //     state.sortCriteria = action.payload;\n        // },\n        // updateTodo: (state, action) => {\n        //     const { id, task } = action.payload;\n        //     const index = state.todoList.findIndex(todo => todo.id === id);\n        //     if (index !== -1) {\n        //         state.todoList[index] = {\n        //         ...state.todoList[index],\n        //             task\n        //          }\n        //     }\n           \n        //  },\n        // toggleTodo: (state, action) => {\n        //     const {id, isCompleted} = action.payload;\n        //     const index = state.todoList.findIndex(todo => todo.id === id);\n        //     if (index !== -1) {\n        //         state.todoList[index] = {\n        //             ...state.todoList[index],\n        //             isCompleted\n        //         }\n        //     }\n        // }\n\n\nexport const { setTodoList, addTodo, updateTodo } = TodoSlice.actions\nexport default TodoSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AAanC,MAAMC,YAAoB,GAAG,EAAE;AAE/B,OAAO,MAAMC,SAAS,GAAGJ,WAAW,CAAC;EACjCK,IAAI,EAAE,UAAU;EAChBF,YAAY;EACZG,QAAQ,EAAE;IACNC,WAAW,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC5BD,KAAK,GAAGC,MAAM,CAACC,OAAO;IAC1B,CAAC;IACDC,OAAO,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MACxB,MAAM;QAAEG,IAAI;QAAEC;MAAiB,CAAC,GAAGJ,MAAM,CAACC,OAAO;MACjDF,KAAK,CAACM,IAAI,CAAC;QACTC,EAAE,EAAEb,MAAM,CAAC,CAAC;QACZU,IAAI;QACJC,gBAAgB;QAChBG,WAAW,EAAE;MACf,CAAC,CAAC;IACN,CAAC;IACDC,UAAU,EAAEA,CAACT,KAAK,EAAEC,MAAM,KAAK;MAC7B,MAAO;QAAEM,EAAE;QAAEC,WAAW;QAAEH;MAAiB,CAAC,GAAGJ,MAAM,CAACC,OAAO;MAC7D,MAAMQ,YAAY,GAAGV,KAAK,CAACW,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACL,EAAE,KAAKA,EAAE,CAAC;MACvD,IAAIG,YAAY,EAAE;QAChBA,YAAY,CAACF,WAAW,GAAGA,WAAW;QACtCE,YAAY,CAACL,gBAAgB,GAAGA,gBAAgB;MAClD;IACF;EACJ;AACJ,CAAC,CAAC;;AAKM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGR,OAAO,MAAM;EAAEN,WAAW;EAAEI,OAAO;EAAEM;AAAW,CAAC,GAAGb,SAAS,CAACiB,OAAO;AACrE,eAAejB,SAAS,CAACkB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}