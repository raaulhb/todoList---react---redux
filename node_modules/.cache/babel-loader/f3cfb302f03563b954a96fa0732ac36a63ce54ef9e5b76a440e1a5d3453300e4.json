{"ast":null,"code":"// import { createSlice } from '@reduxjs/toolkit';\n// import { v4 as uuids4 } from 'uuid';\n\n// interface Todo {\n//     id: string;\n//     task: string;\n//     isCompleted: boolean;\n//     priorityCriteria: string;\n// }\n\n// const initialState = {\n//     todoList: [],\n//     sortCriteria: 'All'\n// }\n\n// export const TodoSlice = createSlice({\n//     name: 'todo',\n//     initialState,\n//     reducers: {\n//         setTodoList: (state,action) => {\n//             state.todoList = action.payload;\n//         },\n//         addTodo: (state, action) => {\n//             const { task, priorityCriteria } = action.payload;\n//             state.todoList.push({\n//               id: uuids4(),\n//               task,\n//               priorityCriteria,\n//               isCompleted: false,\n//             });\n//         },\n//         sortTodo: (state, action) => {\n//             state.sortCriteria = action.payload;\n//         },\n//         updateTodo: (state, action) => {\n//             const { id, task } = action.payload;\n//             const index = state.todoList.findIndex(todo => todo.id === id);\n//             if (index !== -1) {\n//                 state.todoList[index] = {\n//                     ...state.todoList[index],\n//                     task\n//                  }\n//             }\n\n//         },\n//         toggleTodo: (state, action) => {\n//             const {id, isCompleted} = action.payload;\n//             const index = state.todoList.findIndex(todo => todo.id === id);\n//             if (index !== -1) {\n//                 state.todoList[index] = {\n//                     ...state.todoList[index],\n//                     isCompleted\n//                 }\n//             }\n//         }\n//     },\n// })\n\n// export const { setTodoList, addTodo, sortTodo, updateTodo, toggleTodo } = TodoSlice.actions\n// export default TodoSlice.reducer;","map":{"version":3,"names":[],"sources":["/Users/raulbarros/Desktop/todo-redux/src/features/todoList/TodoSlice.tsx"],"sourcesContent":["// import { createSlice } from '@reduxjs/toolkit';\n// import { v4 as uuids4 } from 'uuid';\n\n// interface Todo {\n//     id: string;\n//     task: string;\n//     isCompleted: boolean;\n//     priorityCriteria: string;\n// }\n\n// const initialState = {\n//     todoList: [],\n//     sortCriteria: 'All'\n// }\n\n// export const TodoSlice = createSlice({\n//     name: 'todo',\n//     initialState,\n//     reducers: {\n//         setTodoList: (state,action) => {\n//             state.todoList = action.payload;\n//         },\n//         addTodo: (state, action) => {\n//             const { task, priorityCriteria } = action.payload;\n//             state.todoList.push({\n//               id: uuids4(),\n//               task,\n//               priorityCriteria,\n//               isCompleted: false,\n//             });\n//         },\n//         sortTodo: (state, action) => {\n//             state.sortCriteria = action.payload;\n//         },\n//         updateTodo: (state, action) => {\n//             const { id, task } = action.payload;\n//             const index = state.todoList.findIndex(todo => todo.id === id);\n//             if (index !== -1) {\n//                 state.todoList[index] = {\n//                     ...state.todoList[index],\n//                     task\n//                  }\n//             }\n           \n//         },\n//         toggleTodo: (state, action) => {\n//             const {id, isCompleted} = action.payload;\n//             const index = state.todoList.findIndex(todo => todo.id === id);\n//             if (index !== -1) {\n//                 state.todoList[index] = {\n//                     ...state.todoList[index],\n//                     isCompleted\n//                 }\n//             }\n//         }\n//     },\n// })\n\n// export const { setTodoList, addTodo, sortTodo, updateTodo, toggleTodo } = TodoSlice.actions\n// export default TodoSlice.reducer;"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}