{"ast":null,"code":"// import { createSlice } from '@reduxjs/toolkit';\n// import { v4 as uuids4 } from 'uuid';\n\n// interface Todo {\n//     id: string;\n//     task: string;\n//     isCompleted: boolean;\n//     priorityCriteria: string;\n// }\n\n// const initialState = {\n//     todoList: [],\n//     sortCriteria: 'All'\n// }\n\n// export const TodoSlice = createSlice({\n//     name: 'todo',\n//     initialState,\n//     reducers: {\n//         setTodoList: (state,action) => {\n//             state.todoList = action.payload;\n//         },\n//         addTodo: (state, action) => {\n//             const { task, priorityCriteria } = action.payload;\n//             state.todoList.push({\n//               id: uuids4(),\n//               task,\n//               priorityCriteria,\n//               isCompleted: false,\n//             });\n//         },\n//         sortTodo: (state, action) => {\n//             state.sortCriteria = action.payload;\n//         },\n//         updateTodo: (state, action) => {\n//             const { id, task } = action.payload;\n//             const index = state.todoList.findIndex(todo => todo.id === id);\n//             if (index !== -1) {\n//                 state.todoList[index] = {\n//                     ...state.todoList[index],\n//                     task\n//                  }\n//             }\n\n//         },\n//         toggleTodo: (state, action) => {\n//             const {id, isCompleted} = action.payload;\n//             const index = state.todoList.findIndex(todo => todo.id === id);\n//             if (index !== -1) {\n//                 state.todoList[index] = {\n//                     ...state.todoList[index],\n//                     isCompleted\n//                 }\n//             }\n//         }\n//     },\n// })\n\n// export const { setTodoList, addTodo, sortTodo, updateTodo, toggleTodo } = TodoSlice.actions\n// export default TodoSlice.reducer;\nimport { createSlice } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\nconst initialState = {\n  todoList: [],\n  sortCriteria: 'All'\n};\nconst todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    setTodoList: (state, action) => {\n      state.todoList = action.payload;\n    },\n    addTodo: (state, action) => {\n      const {\n        task,\n        priorityCriteria\n      } = action.payload;\n      state.todoList.push({\n        id: uuidv4(),\n        task,\n        priorityCriteria,\n        isCompleted: false\n      });\n    },\n    sortTodo: (state, action) => {\n      state.sortCriteria = action.payload;\n    },\n    updateTodo: (state, action) => {\n      const {\n        id,\n        task\n      } = action.payload;\n      const index = state.todoList.findIndex(todo => todo.id === id);\n      if (index !== -1) {\n        state.todoList[index] = {\n          ...state.todoList[index],\n          task\n        };\n      }\n    },\n    toggleTodo: (state, action) => {\n      const {\n        id,\n        isCompleted\n      } = action.payload;\n      const index = state.todoList.findIndex(todo => todo.id === id);\n      if (index !== -1) {\n        state.todoList[index] = {\n          ...state.todoList[index],\n          isCompleted: !isCompleted\n        };\n      }\n    }\n  }\n});\nexport const {\n  setTodoList,\n  addTodo,\n  sortTodo,\n  updateTodo,\n  toggleTodo\n} = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"names":["createSlice","v4","uuidv4","initialState","todoList","sortCriteria","todoSlice","name","reducers","setTodoList","state","action","payload","addTodo","task","priorityCriteria","push","id","isCompleted","sortTodo","updateTodo","index","findIndex","todo","toggleTodo","actions","reducer"],"sources":["/Users/raulbarros/Desktop/todo-redux/src/features/todoList/TodoSlice.tsx"],"sourcesContent":["// import { createSlice } from '@reduxjs/toolkit';\n// import { v4 as uuids4 } from 'uuid';\n\n// interface Todo {\n//     id: string;\n//     task: string;\n//     isCompleted: boolean;\n//     priorityCriteria: string;\n// }\n\n// const initialState = {\n//     todoList: [],\n//     sortCriteria: 'All'\n// }\n\n// export const TodoSlice = createSlice({\n//     name: 'todo',\n//     initialState,\n//     reducers: {\n//         setTodoList: (state,action) => {\n//             state.todoList = action.payload;\n//         },\n//         addTodo: (state, action) => {\n//             const { task, priorityCriteria } = action.payload;\n//             state.todoList.push({\n//               id: uuids4(),\n//               task,\n//               priorityCriteria,\n//               isCompleted: false,\n//             });\n//         },\n//         sortTodo: (state, action) => {\n//             state.sortCriteria = action.payload;\n//         },\n//         updateTodo: (state, action) => {\n//             const { id, task } = action.payload;\n//             const index = state.todoList.findIndex(todo => todo.id === id);\n//             if (index !== -1) {\n//                 state.todoList[index] = {\n//                     ...state.todoList[index],\n//                     task\n//                  }\n//             }\n           \n//         },\n//         toggleTodo: (state, action) => {\n//             const {id, isCompleted} = action.payload;\n//             const index = state.todoList.findIndex(todo => todo.id === id);\n//             if (index !== -1) {\n//                 state.todoList[index] = {\n//                     ...state.todoList[index],\n//                     isCompleted\n//                 }\n//             }\n//         }\n//     },\n// })\n\n// export const { setTodoList, addTodo, sortTodo, updateTodo, toggleTodo } = TodoSlice.actions\n// export default TodoSlice.reducer;\nimport { createSlice } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst initialState = {\n  todoList: [],\n  sortCriteria: 'All',\n};\n\nconst todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    setTodoList: (state, action) => {\n      state.todoList = action.payload;\n    },\n    addTodo: (state, action) => {\n      const { task, priorityCriteria } = action.payload;\n      state.todoList.push({\n        id: uuidv4(),\n        task,\n        priorityCriteria,\n        isCompleted: false,\n      });\n    },\n    sortTodo: (state, action) => {\n      state.sortCriteria = action.payload;\n    },\n    updateTodo: (state, action) => {\n      const { id, task } = action.payload;\n      const index = state.todoList.findIndex(todo => todo.id === id);\n      if (index !== -1) {\n        state.todoList[index] = { ...state.todoList[index], task };\n      }\n    },\n    toggleTodo: (state, action) => {\n      const { id, isCompleted } = action.payload;\n      const index = state.todoList.findIndex(todo => todo.id === id);\n      if (index !== -1) {\n        state.todoList[index] = { ...state.todoList[index], isCompleted: !isCompleted };\n      }\n    },\n  },\n});\n\nexport const { setTodoList, addTodo, sortTodo, updateTodo, toggleTodo } = todoSlice.actions;\nexport default todoSlice.reducer;\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AAEnC,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,EAAE;EACZC,YAAY,EAAE;AAChB,CAAC;AAED,MAAMC,SAAS,GAAGN,WAAW,CAAC;EAC5BO,IAAI,EAAE,MAAM;EACZJ,YAAY;EACZK,QAAQ,EAAE;IACRC,WAAW,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC9BD,KAAK,CAACN,QAAQ,GAAGO,MAAM,CAACC,OAAO;IACjC,CAAC;IACDC,OAAO,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MAC1B,MAAM;QAAEG,IAAI;QAAEC;MAAiB,CAAC,GAAGJ,MAAM,CAACC,OAAO;MACjDF,KAAK,CAACN,QAAQ,CAACY,IAAI,CAAC;QAClBC,EAAE,EAAEf,MAAM,CAAC,CAAC;QACZY,IAAI;QACJC,gBAAgB;QAChBG,WAAW,EAAE;MACf,CAAC,CAAC;IACJ,CAAC;IACDC,QAAQ,EAAEA,CAACT,KAAK,EAAEC,MAAM,KAAK;MAC3BD,KAAK,CAACL,YAAY,GAAGM,MAAM,CAACC,OAAO;IACrC,CAAC;IACDQ,UAAU,EAAEA,CAACV,KAAK,EAAEC,MAAM,KAAK;MAC7B,MAAM;QAAEM,EAAE;QAAEH;MAAK,CAAC,GAAGH,MAAM,CAACC,OAAO;MACnC,MAAMS,KAAK,GAAGX,KAAK,CAACN,QAAQ,CAACkB,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACN,EAAE,KAAKA,EAAE,CAAC;MAC9D,IAAII,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBX,KAAK,CAACN,QAAQ,CAACiB,KAAK,CAAC,GAAG;UAAE,GAAGX,KAAK,CAACN,QAAQ,CAACiB,KAAK,CAAC;UAAEP;QAAK,CAAC;MAC5D;IACF,CAAC;IACDU,UAAU,EAAEA,CAACd,KAAK,EAAEC,MAAM,KAAK;MAC7B,MAAM;QAAEM,EAAE;QAAEC;MAAY,CAAC,GAAGP,MAAM,CAACC,OAAO;MAC1C,MAAMS,KAAK,GAAGX,KAAK,CAACN,QAAQ,CAACkB,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACN,EAAE,KAAKA,EAAE,CAAC;MAC9D,IAAII,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBX,KAAK,CAACN,QAAQ,CAACiB,KAAK,CAAC,GAAG;UAAE,GAAGX,KAAK,CAACN,QAAQ,CAACiB,KAAK,CAAC;UAAEH,WAAW,EAAE,CAACA;QAAY,CAAC;MACjF;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAET,WAAW;EAAEI,OAAO;EAAEM,QAAQ;EAAEC,UAAU;EAAEI;AAAW,CAAC,GAAGlB,SAAS,CAACmB,OAAO;AAC3F,eAAenB,SAAS,CAACoB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}